// Code generated by go-bindata.
// sources:
// verify/key.go
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _verifyKeyGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x4d\x6f\xdb\x46\x10\x3d\x8b\xbf\x62\x22\x20\x01\x09\xd1\xb2\x6b\xe7\xa3\x70\x2d\x03\x4d\x1b\xf5\xd0\x36\x08\x1a\xb4\x3d\x08\x6a\xb0\x24\x87\xe2\x82\x34\xa9\x2e\x97\xb2\x85\xd6\xff\xbd\x6f\x76\xd7\x32\xed\xb8\x3d\x14\x49\x44\x93\xdc\x99\x79\x3b\xf3\xe6\xcd\x72\xab\xf2\x5a\x6d\x98\x76\x6c\x74\xb9\x8f\x22\x7d\xb5\xed\x8c\xa5\x38\x9a\x4c\xb3\xbd\xe5\x7e\x8a\x07\x6e\xf3\xae\xd0\xed\xe6\x38\xd3\xad\x32\xfb\x07\x4b\x15\xdf\xb8\x77\x63\x3a\xe3\x9c\x0d\x97\x0d\xe7\x56\x1e\x7b\x6b\xe0\x82\xd5\x24\x8a\x8e\x8f\xe9\x07\xb6\xdf\x55\x9c\xd7\x1f\x87\x2b\xda\x70\xcb\x46\x01\x9f\x00\x40\x0e\x8d\x0b\xaa\x54\x5f\x51\x0f\x73\x57\x92\xad\x98\x36\x7a\xc7\x2d\xb9\x3c\xe6\x51\x39\xb4\xf9\x18\x23\xd6\xb4\x5a\x8b\x2d\x09\x77\xfa\x2b\x9a\x34\x5c\x5a\x3a\x5f\xd0\xc9\xcd\xc9\xc9\xab\xd7\xd1\xc4\xe8\x4d\x75\x58\xf8\x76\x19\x4d\x7a\x79\xf1\xfe\xb1\x46\x5e\x93\xb2\x33\xa4\x9d\xc7\x37\xb8\x5f\x50\xc3\x6d\xdc\x27\x78\x9e\xcd\x04\x30\x20\x2c\xc8\xdf\x67\xa4\x5b\x1b\xf7\x2b\xbd\x4e\x60\xd3\x65\x58\xbe\x74\xf8\xcb\xa5\x8b\x78\x14\x72\x14\x6c\xb0\xdc\xe2\x72\x19\x2e\xc8\xdd\x66\xde\xc5\x23\xb9\x95\x87\x40\x63\xdf\x87\x30\xf8\x09\x4f\x48\x3b\x76\xd6\x8b\x0b\xfa\x3a\x39\xe0\x45\x93\x4c\x4c\x57\xaa\xe6\xd8\xd7\x9a\xd2\x19\x7e\xc8\xd9\xb7\x70\xfe\x61\xb0\xbf\x29\x23\xb5\x64\xa9\x94\xf4\xfa\x65\x0c\xbc\x44\x08\x31\x6c\x07\x03\xd6\xa3\xdb\xc8\x73\x9e\x0b\xe1\x3f\xf2\xde\x11\x0f\xaf\xb7\xc2\x5d\x7d\x20\x3f\x46\xef\xc9\xf5\x3f\x41\xd6\xd1\x64\x23\x5b\x8f\xfb\x54\xaf\xce\xdf\x08\x5d\xa8\xf1\x59\x50\xc7\xfc\x7b\xe6\xed\xbb\x3f\x07\xd5\xc0\xfa\xe6\x7c\x9d\xd2\x26\x71\x25\x0b\xd6\xc2\xa3\xf5\xf3\xf7\x7c\x1d\x4f\x75\xbb\x53\x8d\x2e\x7c\x16\xd8\x7d\x9a\x48\xf5\x77\x69\x4a\x92\x90\xd6\x28\x3b\x72\xee\x4e\x5a\xb6\x52\xd6\xe9\xe8\x2e\xf6\x4e\x57\x5b\xd3\x15\x43\x6e\xa9\xe6\x3d\xe9\x9e\xf2\xce\x18\x24\x25\x40\xef\x3b\xe8\x28\xc4\xc1\xd2\xb5\xcd\x7e\x04\x78\xcd\x88\x36\x0e\x42\x42\xaf\x55\x0f\xe9\x5a\x36\x90\x6e\xc0\x68\xf6\xa9\xc0\xb4\x9d\x25\x94\xab\xad\xc0\x2b\x8f\x70\xd0\x7c\x31\xde\x3f\xe8\x7a\x54\x40\x2c\xd0\x7e\x74\x1e\x93\x3b\x89\xbc\x50\x5a\xf1\x49\xe8\xd9\x82\x4e\x5f\x7a\x91\xfa\x9e\x3d\xc5\x9b\xa0\x21\x62\x63\x2b\xcf\x1c\x30\x6a\xe9\x50\x18\xce\xf9\x2f\xbc\x6d\x54\xce\x82\x98\xd2\xf4\x68\x8a\x3f\xb8\x8e\xbe\x12\x29\x40\x1b\xb2\x3f\xbc\x31\xa5\xe8\x99\x4c\xe9\x47\x17\x17\xd7\x23\xa9\x3c\x29\x90\x0c\x0e\xb7\x77\x73\x0f\xa3\x2c\x8e\xc6\x5e\xe1\xbf\x1b\x5a\xc3\x5b\xc3\x3d\x68\x04\x2a\xd6\x24\xdd\xad\x32\xf6\x7e\xde\x43\x6c\xdc\x33\x98\x1b\x9c\x56\x53\x52\x29\x21\xb9\xdc\xbd\x43\xf8\x61\xfc\xa3\xc9\x4e\x19\x32\xc1\x0b\xaf\x0a\x62\x52\xf4\x9c\x4e\x5f\xc9\x48\x2c\x28\xc3\xf3\x59\xe4\x58\x54\xcf\x4f\x69\x81\xa9\xf7\xfc\xc1\x16\xfb\x1d\x2e\x2f\x49\x25\xf4\xc2\x4d\x9b\xfc\x5b\x2e\x13\xfa\x63\x64\xcc\x12\xfa\x3b\x6c\x10\xe7\x89\x50\x4a\xdc\xf4\xfc\x3f\x60\x5e\x3c\x84\x89\x5c\xb8\x71\x31\x32\xe6\x52\x4a\x86\xcb\xcf\x19\xf2\x1f\x4a\xe9\x84\x3f\x0d\xd1\xe2\xb7\x43\x59\xb2\x89\xe1\x72\x3f\xd6\xbf\x1b\x2d\xd4\x0f\x25\xe8\xf1\x2b\x3f\x69\x6b\x1b\x7e\xd7\x16\x5a\xb5\x29\x99\xf1\x80\x0f\xe5\x5c\x88\xed\xe3\x64\x75\xb2\xbe\x1f\xa4\x0f\x60\xff\x69\xcd\xe7\x55\x87\x46\x1d\x5a\xe4\xf4\x7f\x2f\xea\x6b\x6d\x2b\xe7\x06\x8c\x9f\x15\x54\x72\x73\x90\xb6\x40\x8e\x64\x9d\xfa\x70\x14\x9f\x12\x32\xed\x53\xb2\xbe\x91\xc8\xba\x41\xbd\x9e\x96\xcf\x4f\x16\x74\x2d\xc8\xf1\xd1\xb8\xe0\xb8\x16\x03\xe6\xa1\xd5\xcd\xa3\x81\xf0\xa7\xc5\x17\x93\x7c\xc8\xe1\x3f\xb6\x2a\xd2\x4f\xae\x4f\x9e\xff\x5f\x77\xe1\x98\x4d\x64\xf2\xe4\x63\xf3\x29\x75\x87\xb3\x51\x2d\x3e\xbb\x99\xc7\x00\x6a\x21\x6a\xcc\xc2\x07\xe4\xf3\x71\x16\xf6\x32\x64\x5d\x37\xba\x07\xdb\x32\xcb\xee\x3b\x40\xd8\xf1\xdf\x0f\x4d\x44\x4d\xfd\xc9\x9b\xad\x84\xf3\xd9\xd9\x5a\x52\x1f\x4d\x55\x71\x68\x41\x32\xaa\x66\x7c\xc4\x4a\xa1\x50\xc7\x3f\x01\x00\x00\xff\xff\x8e\x54\x25\x32\x29\x08\x00\x00")

func verifyKeyGoBytes() ([]byte, error) {
	return bindataRead(
		_verifyKeyGo,
		"verify/key.go",
	)
}

func verifyKeyGo() (*asset, error) {
	bytes, err := verifyKeyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "verify/key.go", size: 2089, mode: os.FileMode(420), modTime: time.Unix(1452034514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"verify/key.go": verifyKeyGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"verify": &bintree{nil, map[string]*bintree{
		"key.go": &bintree{verifyKeyGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

