// Code generated by go-bindata.
// sources:
// internal/pkvtools.go
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkvtoolsGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x7d\x6f\xd3\xc8\x13\xfe\x3b\xfe\x14\x43\x24\x90\x4d\xdd\xa4\x94\xb7\x9f\x4a\x5b\xfd\x42\x69\xef\x22\x20\x45\x4d\xa1\x42\x55\x0f\xad\xed\xb1\xb3\x8a\x63\x9b\xdd\x75\xd2\x88\xe3\x03\xdd\xd7\xb8\x4f\x76\x33\xbb\xdb\xd4\x85\x22\x9d\xae\x24\xd8\xde\x99\x7d\xf6\x99\x67\x5e\x9c\xe1\x10\x8e\xea\x66\xad\x64\x31\x33\xf0\xf7\x5f\xbb\x3b\x4f\x5e\xc0\x7b\xa1\xe6\xad\x86\x0b\xba\x99\x95\x09\xaa\x02\xf6\x17\x76\xe9\xff\x0b\xbf\x30\x90\xf5\x61\x30\x1c\xba\x0f\xbc\x93\x29\x56\x1a\x33\x68\xab\x0c\x15\x98\x19\xc2\xa8\x11\x29\x5d\xbc\x25\x86\x4f\xa8\xb4\xac\x2b\xd8\x1d\xec\x40\xc8\x0e\x7d\x6f\xea\x47\xaf\x18\x62\x5d\xb7\xb0\x10\x6b\xa8\x6a\x03\xad\x46\xc2\x90\x1a\x72\x59\x22\xe0\x75\x8a\x8d\x01\x59\x41\x5a\x2f\x9a\x52\x8a\x2a\x45\x58\x49\x33\xb3\xe7\x78\x94\x01\x63\x7c\xf6\x18\x75\x62\x04\xb9\x0b\xda\xd0\xd0\x53\xde\x75\x04\x61\x3c\x69\xfe\x9b\x19\xd3\xec\x0d\x87\xab\xd5\x6a\x20\x2c\xe1\x41\xad\x8a\x61\xe9\x5c\xf5\xf0\xdd\xf8\xe8\x78\x32\x3d\xde\x26\xd2\x7e\xd3\xc7\xaa\x44\xad\x41\xe1\xd7\x56\x2a\x0a\x38\x59\x83\x68\x88\x54\x2a\x12\xa2\x5a\x8a\x15\xd4\x0a\x44\xa1\x90\x6c\xa6\x66\xd2\x2b\x25\x8d\xac\x8a\x18\x74\x9d\x9b\x95\x50\xc8\x30\x99\xd4\x46\xc9\xa4\x35\x77\x34\xbb\xa1\x48\x91\x77\x1d\x48\x35\x51\x41\x7f\x34\x85\xf1\xb4\x0f\xaf\x47\xd3\xf1\x34\x66\x90\x8b\xf1\xf9\xef\xa7\x1f\xcf\xe1\x62\x74\x76\x36\x9a\x9c\x8f\x8f\xa7\x70\x7a\x06\x47\xa7\x93\x37\xe3\xf3\xf1\xe9\x84\x9e\x4e\x60\x34\xf9\x0c\x6f\xc7\x93\x37\x31\x20\x29\x46\xe7\xe0\x75\xa3\x38\x02\xa2\x29\x59\x4d\xcc\xac\x74\x53\xc4\x3b\x14\xf2\xda\x51\xd2\x0d\xa6\x32\x97\x29\x85\x56\x15\xad\x28\x10\x8a\x7a\x89\xaa\xa2\x88\xa0\x41\xb5\x90\x9a\xb3\xaa\x89\x60\xc6\x30\xa5\x5c\x48\x23\x8c\x5d\xfa\x29\x2e\x3e\x28\x08\x86\x8f\x03\xaa\x05\x99\xaf\xa1\x51\xf5\x52\x66\xa8\xad\x4f\x5a\x67\xc8\x8a\x2d\x37\xb6\xac\x4d\x0d\xcc\x71\xad\x07\xc1\xe3\x61\x40\xd9\x99\xf3\xf1\xb2\x32\x74\xbc\x28\x83\x80\xe8\xd7\xca\x40\x18\xf4\xfa\xc9\xda\xa0\xee\xd3\x0d\x56\x84\x43\xdc\x86\x89\xac\x84\x5a\xdf\x59\x9a\xe1\xb5\x7d\x56\xaa\x56\xd6\x59\x61\x5e\x62\x6a\xf8\x96\xc5\xae\x0a\x5a\x8d\x02\x0e\xe3\x37\x34\x47\x33\x4c\xe7\xd3\x76\x01\x05\x56\xa8\x04\xe1\x03\x01\x80\x45\xa3\x9c\xcc\x84\x9e\x81\x26\xb3\xaf\xae\x42\x2e\xb1\x02\xcb\x63\x10\xe4\x6d\x95\x76\x31\x42\x09\x97\x57\x6c\x8b\xfc\x15\xbe\x05\xbd\x12\x73\x03\x7b\x07\xb0\x73\xbd\xb3\xf3\xfc\x45\xd0\x73\x0d\xe8\x17\x46\x27\x41\x4f\xf3\x83\xf3\x0f\x25\xf1\xea\x71\x4e\xa4\xf5\x78\x45\xd7\x7d\x28\xb1\x0a\x75\x44\xf7\x5b\x5b\x0c\xe8\x11\x0e\xc0\x5d\xb7\x58\xaa\x50\x5f\xca\xab\x88\x6c\x32\xf7\xcb\x87\x16\xff\xe4\xc4\xee\xf8\x61\xcb\xb6\xb7\x91\xe5\x3b\x7d\x2d\xc3\x03\xb0\x97\x2d\xe7\xe2\x90\xec\xca\x5d\xa0\xae\xef\x5d\x18\xfa\xb0\x4e\x44\x3b\xb4\xd6\xfd\x7d\xf8\x5f\xb4\xc1\x0b\x7a\x09\x9b\x16\x62\x8e\xa1\x8b\x35\x86\xa7\xf4\x21\xce\x2e\x85\x83\x0f\xad\xf9\x24\x14\xc7\x92\xc4\x1c\xd2\x8b\x67\x21\xe1\x45\x2c\x88\x42\xd3\x2a\x52\x3d\xf8\x1e\x38\xcd\x53\x16\xfc\x2d\xae\xad\xf0\xe4\xf5\x9a\xb5\x9b\x6f\xc4\x0f\x29\xf7\x60\xf3\x1f\x11\xeb\xa0\x57\xf0\xd1\xdd\x3c\xcd\x2f\xf7\x5e\xb2\x5c\x14\xe3\x03\x5f\x1d\x83\x37\x88\xcd\xf1\xd7\x56\x94\x64\x7d\xb9\x77\x15\x43\x11\xd9\x90\x19\xeb\xc0\xa1\xe9\xc1\x04\x57\x61\x5f\x56\x4b\x51\xca\xcc\xb1\xa0\xd3\xfb\x11\x47\x7f\x43\x93\x49\x52\x69\x75\xd8\x81\x75\xb7\xa5\x65\x66\xc2\xb8\x36\xb8\xb1\xf9\xba\xea\xf4\x01\x8f\x85\xb4\x56\x8a\x48\x31\xd0\xa4\x36\x78\xb3\x8f\x2c\x75\x55\xae\x3b\x80\x2b\xb4\xdd\xce\x10\xbc\x75\x25\x34\x95\x2e\x75\x0e\x95\xae\xc7\x28\xd7\x76\x88\xf0\xbc\xa5\x70\xa5\x61\x78\xe1\x10\x36\x35\x9f\x75\xcf\xf7\x75\xdd\x09\x20\x64\x68\xd7\x3a\x3f\x8a\xdb\x0b\x5c\xa1\x54\xec\x13\xc1\x83\x03\xd8\x7d\xe6\x8a\xd4\xe5\xec\x3e\xdd\x18\x8d\x76\x14\x66\xe6\x94\x23\x8c\x39\x67\xc8\x37\xe7\xe0\x0c\x9b\x52\xa4\xc8\x88\x31\xf4\xb7\xfb\xf4\x1f\x7d\xb7\x9f\x70\x29\x50\x6d\xf0\xf9\xe4\x4d\x5d\x4a\x39\xe3\x2e\x9d\xda\x7d\xe1\x9c\xed\x44\x86\xed\xc4\xa3\x92\x65\x87\x48\x37\x43\xf7\x97\x4f\x42\xdb\xbf\xdf\x4c\x05\x32\xf2\x62\x67\x28\x08\xfa\x67\x5b\x5a\x21\x0f\x56\x12\x99\x47\xa3\xb0\xc1\x34\x42\x99\xdb\x69\xe0\xf7\x86\x9a\xdf\x0d\xad\xad\xe4\x18\x44\x0c\x44\x3d\xb5\xcf\xd4\x16\x7e\x38\x04\xbd\xa5\x50\xa0\xbc\x17\x3d\x0a\x2a\x35\x01\x0f\x61\xf7\x39\x37\xcc\x01\x24\x74\xff\xd4\x85\x25\x1e\xee\xc2\x01\xcd\x04\x17\x14\xd9\x42\x77\xc2\xe1\x21\x88\x08\x1e\xd9\x5e\xe4\xbf\x93\x93\x08\xfe\xe8\x18\x93\x08\xfe\xf4\x07\x84\x69\xc4\x82\x03\x96\x1a\xff\x03\xcc\xa3\xbb\x30\x81\xdd\xae\xec\x1e\x1e\x02\x1c\x4a\x42\x5f\xd7\x85\xc4\xbf\xcd\x39\x4f\x6e\x56\x52\x01\xbc\x6e\xf3\x1c\x55\x48\x2e\xb7\x4d\x7f\x41\x2f\x4d\x92\xbe\xcd\x49\x1e\xb7\xf2\x4e\x1a\x53\xe2\x71\x95\xd1\xfb\x3f\x06\xd5\x6d\xff\x36\x1f\xb0\xb0\x3a\x8c\x2e\x77\xae\x6e\xdb\xec\x03\xa9\x7f\x7f\x47\xa4\xb3\x9a\x12\xb5\x49\x91\xed\x8e\xdb\x92\xdf\xfc\xb4\x20\x8c\xf7\x82\x6a\xe8\x7a\x53\xf8\x0c\xd9\x29\xfa\xd8\x6d\xa7\xe0\x63\x20\xa6\x3a\x06\xe3\x12\x49\xac\x4b\x8a\xd7\xc9\xf2\xf3\xdc\xf1\xc5\x48\x22\xfc\xd0\x4c\x34\xcc\xef\xad\x52\x5e\x75\x95\xfa\xaf\x1b\x82\x34\xe0\x4e\xc8\x6c\x27\xd8\x08\x45\xa9\x50\x64\x6b\x20\x31\x38\x4c\x1a\x1c\x9d\xd3\x6d\x07\x7d\xf9\x75\xff\x64\xb1\x35\xfa\x64\x7c\x5c\xfa\x89\x1c\x71\x93\xf2\x7b\xe9\x4b\x6c\xe7\xb8\xa2\x5f\x09\xc8\xc1\x7f\x73\x6f\x8a\x8c\x4b\x33\xf1\xef\x9a\x9f\x3b\x9f\xa5\x4c\x28\x84\x79\x29\x99\x13\xb7\xbd\x7d\x65\x00\x9d\xf8\xeb\xf9\x4a\xbb\xfa\x6e\x48\x27\x97\x9c\x80\xad\xa7\x57\x2c\x59\xa7\xc5\xb2\x4d\x3e\xa2\x5f\xf5\x3a\x09\x4c\xa5\xf2\x4f\x00\x00\x00\xff\xff\x91\x54\x59\x50\xfd\x0a\x00\x00")

func pkvtoolsGoBytes() ([]byte, error) {
	return bindataRead(
		_pkvtoolsGo,
		"pkvtools.go",
	)
}

func pkvtoolsGo() (*asset, error) {
	bytes, err := pkvtoolsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkvtools.go", size: 2813, mode: os.FileMode(420), modTime: time.Unix(1452083392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkvtools.go": pkvtoolsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"pkvtools.go": &bintree{pkvtoolsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

