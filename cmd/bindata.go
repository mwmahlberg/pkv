// Code generated by go-bindata.
// sources:
// verify/key.go
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _verifyKeyGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x6f\x6f\xd3\xc8\x13\x7e\x1d\x7f\x8a\x21\x12\xc8\xa6\x6e\x52\xca\xbf\x9f\x4a\x5b\xfd\x42\x69\xef\x22\x20\x45\x4d\xa1\x42\x55\x0f\xad\xed\xb1\xb3\x8a\x63\x9b\xdd\x75\xd2\x88\xe3\x03\xdd\xd7\xb8\x4f\x76\x33\xbb\xdb\xd4\x2d\xdc\xbd\x38\x5d\x49\xb0\xbd\x33\xfb\xec\x33\xcf\xfc\x71\x86\x43\x38\xaa\x9b\xb5\x92\xc5\xcc\xc0\x9f\x7f\xec\xee\x3c\x79\x01\xef\x85\x9a\xb7\x1a\x2e\xe8\x66\x56\x26\xa8\x0a\xd8\x5f\xd8\xa5\xff\x2f\xfc\xc2\x40\xd6\x87\xc1\x70\xe8\x3e\xf0\x4e\xa6\x58\x69\xcc\xa0\xad\x32\x54\x60\x66\x08\xa3\x46\xa4\x74\xf1\x96\x18\x3e\xa1\xd2\xb2\xae\x60\x77\xb0\x03\x21\x3b\xf4\xbd\xa9\x1f\xbd\x62\x88\x75\xdd\xc2\x42\xac\xa1\xaa\x0d\xb4\x1a\x09\x43\x6a\xc8\x65\x89\x80\xd7\x29\x36\x06\x64\x05\x69\xbd\x68\x4a\x29\xaa\x14\x61\x25\xcd\xcc\x9e\xe3\x51\x06\x8c\xf1\xd9\x63\xd4\x89\x11\xe4\x2e\x68\x43\x43\x4f\x79\xd7\x11\x84\xf1\xa4\xf9\x6f\x66\x4c\xb3\x37\x1c\xae\x56\xab\x81\xb0\x84\x07\xb5\x2a\x86\xa5\x73\xd5\xc3\x77\xe3\xa3\xe3\xc9\xf4\x78\x9b\x48\xfb\x4d\x1f\xab\x12\xb5\x06\x85\x5f\x5b\xa9\x28\xe0\x64\x0d\xa2\x21\x52\xa9\x48\x88\x6a\x29\x56\x50\x2b\x10\x85\x42\xb2\x99\x9a\x49\xaf\x94\x34\xb2\x2a\x62\xd0\x75\x6e\x56\x42\x21\xc3\x64\x52\x1b\x25\x93\xd6\xdc\xd1\xec\x86\x22\x45\xde\x75\x20\xd5\x44\x05\xfd\xd1\x14\xc6\xd3\x3e\xbc\x1e\x4d\xc7\xd3\x98\x41\x2e\xc6\xe7\xbf\x9e\x7e\x3c\x87\x8b\xd1\xd9\xd9\x68\x72\x3e\x3e\x9e\xc2\xe9\x19\x1c\x9d\x4e\xde\x8c\xcf\xc7\xa7\x13\x7a\x3a\x81\xd1\xe4\x33\xbc\x1d\x4f\xde\xc4\x80\xa4\x18\x9d\x83\xd7\x8d\xe2\x08\x88\xa6\x64\x35\x31\xb3\xd2\x4d\x11\xef\x50\xc8\x6b\x47\x49\x37\x98\xca\x5c\xa6\x14\x5a\x55\xb4\xa2\x40\x28\xea\x25\xaa\x8a\x22\x82\x06\xd5\x42\x6a\xce\xaa\x26\x82\x19\xc3\x94\x72\x21\x8d\x30\x76\xe9\x87\xb8\xf8\xa0\x20\x18\x3e\x0e\xa8\x16\x64\xbe\x86\x46\xd5\x4b\x99\xa1\xb6\x3e\x69\x9d\x21\x2b\xb6\xdc\xd8\xb2\x36\x35\x30\xc7\xb5\x1e\x04\x8f\x87\x01\x65\x67\xce\xc7\x3b\x7b\x10\x10\xf9\x5a\x19\x08\x83\x5e\x3f\x59\x1b\xd4\x7d\xba\xc1\x8a\x50\x88\xd9\x30\x91\x95\x50\xeb\x3b\x4b\x33\xbc\xb6\xcf\x4a\xd5\xca\x3a\x2b\xcc\x4b\x4c\x0d\xdf\xb2\xd4\x55\x41\xab\x51\xc0\x41\xfc\x82\xe6\x68\x86\xe9\x7c\xda\x2e\xa0\xc0\x0a\x95\x20\x7c\x20\x00\xb0\x68\x94\x91\x99\xd0\x33\xd0\x64\xf6\xb5\x55\xc8\x25\x56\x60\x79\x0c\x82\xbc\xad\xd2\x2e\x46\x28\xe1\xf2\x8a\x6d\x91\xbf\xc2\xb7\xa0\x57\x62\x6e\x60\xef\x00\x76\xae\x77\x76\x9e\xbf\x08\x7a\xae\xfd\xfc\xc2\xe8\x24\xe8\x69\x7e\x70\xfe\xa1\x24\x5e\x3d\xce\x88\xb4\x1e\xaf\xe8\xba\x0f\x25\x56\xa1\x8e\xe8\x7e\x6b\x8b\x01\x3d\xc2\x01\xb8\xeb\x16\x95\x9e\x09\xf5\xa5\xbc\x8a\xc8\x26\x73\xbf\x7c\x68\xf1\x4f\x4e\xec\x8e\x7b\x5b\xb6\xbd\x8d\x2c\xdf\xe9\x6b\x19\x1e\x80\xbd\x6c\x39\x17\x87\x64\x57\xee\x02\x75\x7d\xef\xc2\xd0\x87\x75\x22\xda\xa1\xb5\xee\xef\xc3\xff\xa2\x0d\x5e\xd0\x4b\xd8\xb4\x10\x73\x0c\x5d\xac\x31\x3c\xa5\x0f\x71\x76\x29\x1c\x7c\x68\xcd\x27\xa1\x38\x96\x24\xe6\x90\x5e\x3c\x0b\x09\x2f\x62\x41\x14\x9a\x56\x91\xea\xc1\xf7\xc0\x69\x9e\xb2\xe0\x6f\x71\x6d\x85\x27\xaf\xd7\xac\xdd\x7c\x23\x7e\x48\xb9\x07\x9b\xff\x88\x58\x07\xbd\x82\x8f\xee\xe6\x69\x7e\xb9\xf7\x92\xe5\xa2\x18\x1f\xf8\xea\x18\xbc\x41\x6c\x8e\xbf\xb6\xa2\x24\xeb\xcb\xbd\xab\x18\x8a\xc8\x86\xcc\x58\x07\x0e\x4d\x0f\x26\xb8\x0a\xfb\xb2\x5a\x8a\x52\x66\x8e\x05\x9d\xde\x8f\x38\xfa\x1b\x9a\x4c\x92\x4a\xab\xc3\x0e\xac\xbb\x2d\x2d\x33\x13\xc6\x35\xc1\x8d\xcd\xd7\x55\xa7\x0b\x78\x28\xa4\xb5\x52\x44\x8a\x81\x26\xb5\xc1\x9b\x7d\x64\xa9\xab\x72\xdd\x01\x5c\xa1\xed\x75\x86\xe0\xad\x2b\xa1\xa9\x74\x0d\xf2\xc0\xf2\x18\xe5\xda\x8e\x10\x9e\xb6\x14\xae\x34\x0c\x2f\x1c\xc2\xa6\xe6\xb3\xee\xf9\xbe\xae\x3b\x01\x84\x0c\xed\x5a\xe7\xbe\xb8\xbd\xc0\x15\x4a\xc5\x3e\x11\x3c\x38\x80\xdd\x67\xae\x48\x5d\xce\x7e\xa6\x1b\xa3\xd1\x8e\xc2\xcc\x9c\x72\x84\x31\xe7\x0c\xf9\xe6\x1c\x9c\x61\x53\x8a\x14\x19\x31\x86\xfe\x76\x9f\xfe\xa3\xef\xf6\x13\x2e\x05\xaa\x0d\x3e\x9f\xbc\xa9\x4b\x29\x67\xdc\xa5\x53\xbb\x2f\x9c\x77\x4a\xe5\xa7\x05\x92\x90\xc3\xf7\x9b\xbe\x27\x23\x2f\x76\xda\x5e\xd0\x3f\xdb\xb4\x0a\x79\x70\x92\x8c\x3c\xfa\x84\xa5\xdb\x08\x65\x6e\xfb\xdd\xef\x0d\x35\xcf\xfe\xd6\xd6\x6a\x0c\x22\x06\x22\x97\xda\x67\x2a\x7c\xdf\xfe\x41\x6f\x29\x14\x28\xef\x45\x8f\x82\x8a\x49\xc0\x43\xd8\x7d\xce\x2d\x71\x00\x09\xdd\x3f\x0d\xac\x8a\xe2\xe1\x2e\x1c\x50\xd7\x3b\xfd\xc8\x16\xba\x13\x0e\x0f\x41\x44\xf0\xc8\x76\x1b\xff\x9d\x9c\x44\xf0\x5b\xc7\x98\x44\xf0\xbb\x3f\x20\x4c\x23\x96\x14\xb0\xd4\xf8\x2f\x60\x1e\xdd\x85\x09\xec\x76\x65\xf7\x70\x9b\x73\x28\x09\x7d\x5d\x9f\x11\xff\x36\xe7\x4c\xb8\x69\x48\x29\x7e\xdd\xe6\x39\xaa\x90\x5c\x6e\xdb\xfa\x82\x5e\x8a\x24\x7d\x9b\x93\x3c\x6e\xe5\x9d\x34\xa6\xc4\xe3\x2a\xa3\xf7\x7b\x0c\xaa\xdb\xe0\x6d\x3e\x60\x61\x75\x18\x5d\xee\x5c\xdd\x36\xd2\x07\x52\xff\xe7\x35\x9f\xce\x6a\x4a\xd4\x26\x45\xb6\xfe\x6f\x8b\x7a\xf3\xd3\x81\x30\xde\x0b\xaa\x92\xeb\x4d\x69\x33\x64\xa7\xac\x63\xb7\x9d\x82\x8f\x81\x98\xea\x18\x8c\x4b\x24\xb1\x2e\x29\x5e\x27\xcb\x8f\x93\x85\xb2\xe6\xcb\xf1\x5e\xbb\xd0\xb8\x66\x03\xf5\x43\x25\xcb\x7b\x0d\xe1\xa6\xc5\x7f\x56\xf2\x9e\xc3\x3f\x1c\x95\xc5\x5f\x6c\x9e\x9c\xfe\x1f\x97\x7e\xcc\x46\xdc\x79\xfc\xb2\xf9\x12\xdb\xe1\xac\xe8\xc5\x8f\x1c\xef\x37\x37\xfe\x33\xae\xc6\xc4\xbf\x40\x7e\x6c\x67\x56\x2f\x21\xd6\xf3\x92\x7e\xc1\x60\xc6\xbd\x6c\xdf\x03\x40\x27\xfe\xfd\xd0\xa4\x5d\x7d\x37\x79\x93\x4b\xd6\x7c\xeb\xe9\x15\x53\xef\x74\x55\xb6\x49\x41\xd4\x89\xa6\x3b\x62\x39\x50\xaa\x8e\xbf\x02\x00\x00\xff\xff\x75\x69\x0f\xc5\xd0\x0a\x00\x00")

func verifyKeyGoBytes() ([]byte, error) {
	return bindataRead(
		_verifyKeyGo,
		"verify/key.go",
	)
}

func verifyKeyGo() (*asset, error) {
	bytes, err := verifyKeyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "verify/key.go", size: 2768, mode: os.FileMode(420), modTime: time.Unix(1452037199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"verify/key.go": verifyKeyGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"verify": &bintree{nil, map[string]*bintree{
		"key.go": &bintree{verifyKeyGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

